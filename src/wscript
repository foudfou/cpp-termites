#! /usr/bin/env python
# Copyright (c) 2014 Foudil Br√©tel. All rights reserved.

def configure(cnf):
    cnf.env.SRC_INC_DIRS = ['../include', '.']

def build(bld):
    sources = bld.path.ant_glob('*.cpp')
    parser = bld.path.find_node('Config.rl')
    bld.program(
        features = 'cxx cxxprogram',
        source   = [parser] + sources,
        target   = 'termites',
        includes = bld.env.SRC_INC_DIRS,
        using    = 'rl/termites_conf.rl',
    )
    bld.add_manual_dependency(parser, bld.path.find_node('rl/termites_conf.rl'))

    if bld.options.valgrind:
        bld(name = 'valgrind',
            rule   = ('${env.VALGRIND} --leak-check=full --show-leak-kinds=all'
                      ' --error-exitcode=1 ${SRC} ${bld.options.valgrind}'),
            source = 'termites',
            always = True,
        )


from waflib.Task import Task
from waflib.TaskGen import extension

class ragel(Task):
    run_str = 'ragel ${SRC} -o ${TGT}'
    color   = 'BLUE'
    ext_out = ['.cpp']

@extension('.rl')
def process_rl(self, node):
    cpp_node = node.change_ext('.cpp')
    tsk = self.create_task('ragel', node, cpp_node)
    self.source.extend(tsk.outputs)
